/*/
 * Copyright (c) 2015-2017 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "kemar.idl"
component kemar {
    version     "1.1";
    lang        "c";
    require     "genom3 >= 2.99.26";
    codels-require "elmo-axis-libs";

    port in kemar::cmd_vel Cmd;
    port out kemar::state currentState;

    typedef kemar::state head;
    
    ids{
        double headSpeed;
    };

    task motion {
        codel <start>   motionStart(inout ::ids) yield ether;
        codel <stop>    motionStop() yield ether;
    };

    task state {
        period                  10ms;
        priority                400;
        stack                   4000;

        codel <start>           stateStart() yield sendS;
        codel <sendS>           sSend(port in Cmd, port out currentState, inout ::ids) yield pause::sendS;
    };

    /*Homing: Calls kemarHoming(h) and k=KemarStructInit(h)*/
    activity Homing() {
        task motion;

        codel <start>           hStart() yield sendH;
        codel <sendH>           hSend(inout ::ids) yield recvH, ether;
        codel <recvH>           hWaitForData() yield sendH, recvH, ether;
    };

    /*Set Velocity: calls kemarSetGearVelRadS*/
    activity SetVelocity(in double velocity) {
        task motion;

        codel <start>           svStart(in velocity, inout ::ids) yield ether;
    };

    /*Move Absolute Position: calls kemarSetGearVelRadS, kemarSetGearPosAbsRad, kemarWaitMsgValid*/
    activity MoveAbsolutePosition(in double target) {
        task motion;

        codel <start>           mapStart(inout ::ids) yield sendMAP;
        codel <sendMAP>         mapSend(inout ::ids, in target) yield ether;
    };

    /*Move Relative Position: calls kemarSetGearVelRadS, kemarSetGearPosRelRad, kemarWaitMsgValid*/
    activity MoveRelativePosition(in double target) {
        task motion;

        codel <start>           mrpStart(inout ::ids) yield sendMRP;
        codel <sendMRP>         mrpSend(inout ::ids, in target) yield ether;
    };

    /*Control in Speed (Reads Velocity to set): calls kemarSetGearVelRadS*/
    activity ControlInSpeed(in double velocity) {
        task motion;

        codel <start>           cisStart() yield sendCIS;
        codel <sendCIS>         cisSend(inout ::ids, in velocity) yield ether;
        
    };

    function GetPosition(out head Head){
        codel getPosition(out Head);
    };
};
