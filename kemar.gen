/*  Copyright (c) 2015, LAAS/CNRS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, 
 *    this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, 
 *    this list of conditions and the following disclaimer in the documentation 
 *    and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the copyright holder nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "kemar.idl"
component kemar {
    version     "1.0";
    lang        "c";
    require     "genom3 >= 2.99.26";
    codels-require "elmo-axis-libs";

    port in kemar::cmd_vel Cmd;

    port out kemar::state currentState;
	port out kemar::position_indexes_movement Indexes;

    typedef kemar::state head;
    
    ids{
        double headSpeed;
    };

    task motion {
        codel <start>   motionStart(inout ::ids, port out Indexes) yield ether;
        codel <stop>    motionStop() yield ether;
    };

    task state {
        period                  10ms;
        priority                400;
        stack                   4000;

        codel <start>           stateStart() yield sendS;
        codel <sendS>           sSend(port in Cmd, port out currentState, inout ::ids) yield pause::recvS, pause::sendS;
        codel <recvS>           sWaitForData(inout ::ids) yield pause::sendS, pause::recvS;
    };

    /*Homing: Calls kemarHoming(h) and k=KemarStructInit(h)*/
    activity Homing() {
        task motion;

        codel <start>           hStart() yield sendH;
        codel <sendH>           hSend(inout ::ids) yield recvH, ether;
        codel <recvH>           hWaitForData() yield sendH, recvH, ether;
    };

    /*Current Position: calls kemarGetInfo*/
    /*activity CurrentPosition() {
        task motion;

        codel <start>           cpStart() yield sendCP;
        codel <sendCP>          cpSend(port out currentState) yield recvCP, sendCP, ether;
        codel <recvCP>          cpWaitForData() yield sendCP, recvCP;
    };*/

    /*Set Velocity: calls kemarSetGearVelRadS*/
    activity SetVelocity(in double velocity) {
        task motion;

        codel <start>           svStart(in velocity, inout ::ids) yield ether;
    };

    /*Move Absolute Position: calls kemarSetGearVelRadS, kemarSetGearPosAbsRad, kemarWaitMsgValid*/
    activity MoveAbsolutePosition(in double target) {
        task motion;
        interrupts MoveAbsolutePosition;

        codel <start>           mapStart(inout ::ids) yield sendMAP;
        codel <sendMAP>         mapSend(inout ::ids, in target, port out Indexes) yield recvMAP, ether; 
        codel <recvMAP>         mapWaitForData() yield sendMAP, recvMAP;
    };

    /*Move Relative Position: calls kemarSetGearVelRadS, kemarSetGearPosRelRad, kemarWaitMsgValid*/
    activity MoveRelativePosition(in double target) {
        task motion;
        interrupts MoveRelativePosition;

        codel <start>           mrpStart(inout ::ids) yield sendMRP;
        codel <sendMRP>         mrpSend(in target) yield recvMRP, ether;
        codel <recvMRP>         mrpWaitForData() yield sendMRP, recvMRP;
    };

    /*Control in Speed (Reads Velocity to set): calls kemarSetGearVelRadS*/
    activity ControlInSpeed(in double velocity) {
        task motion;

        codel <start>           cisStart() yield sendCIS;
        codel <sendCIS>         cisSend(in velocity) yield recvCIS, ether;
        codel<recvCIS>          cisWaitForData() yield sendCIS, recvCIS;
        
    };

    function GetPosition(out head Head){
        codel getPosition(out Head);
    };

    activity TESTPosToVel(){
        task motion;
    
        codel <start>        tptvStart() yield ether;
    };

    activity TESTVelToPos(){
        task motion;
    
        codel <start>        tvtpStart() yield ether;
    };
};
